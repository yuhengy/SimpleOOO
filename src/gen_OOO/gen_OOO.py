
def gen_OOO(
):

  v  = ""
  v += "\n"

  v += "`include \"param.v\"\n"
  v += "\n"

  v += "`include \"decode.v\"\n"
  v += "`include \"execute.v\"\n"
  v += "\n"

  v += "`include \"rf.v\"\n"
  v += "`include \"memi.v\"\n"
  v += "`include \"memd.v\"\n"
  v += "\n"
  v += "\n"


  v += "module OOO(\n"
  v += "  input clk,\n"
  v += "  input rst\n"
  v += ");\n"
  v += "  integer i, j;\n"
  v += "\n"

  v += "  // STEP: PC\n"
  v += "  reg  [`MEMI_SIZE_LOG-1:0] F_pc;\n"
  v += "  wire [`MEMI_SIZE_LOG-1:0] F_next_pc;\n"
  v += "  always @(posedge clk) begin\n"
  v += "    if (rst) F_pc <= 0;\n"
  v += "    else     F_pc <= F_next_pc;\n"
  v += "  end\n"
  v += "\n"
  v += "\n"
  v += "\n"
  v += "\n"




  v += "  // STEP: Fetch\n"
  v += "  wire [`INST_LEN-1:0] F_inst;\n"
  v += "  memi memi_instance(\n"
  v += "    .clk(clk), .rst(rst),\n"
  v += "    .req_addr(F_pc), .resp_data(F_inst)\n"
  v += "  );\n"
  v += "\n"
  v += "\n"
  v += "\n"
  v += "\n"




  v += "  // STEP: Decode\n"
  v += "  wire [`INST_SIZE_LOG-1:0] F_opcode;\n"
  v += "\n"
  v += "  wire                      F_rs1_used;\n"
  v += "  wire [`REG_LEN-1      :0] F_rs1_imm;\n"
  v += "  wire [`MEMI_SIZE_LOG-1:0] F_rs1_br_offset;\n"
  v += "  wire [`RF_SIZE_LOG-1  :0] F_rs1;\n"
  v += "\n"
  v += "  wire                      F_rs2_used;\n"
  v += "  wire [`RF_SIZE_LOG-1  :0] F_rs2;\n"
  v += "\n"
  v += "  wire                    F_wen;\n"
  v += "  wire [`RF_SIZE_LOG-1:0] F_rd;\n"
  v += "  wire                    F_rd_data_use_alu;\n"
  v += "\n"
  v += "  wire F_mem_valid;\n"
  v += "\n"
  v += "  wire F_is_br;\n"
  v += "\n"
  v += "  decode decode_instance(\n"
  v += "    .inst(F_inst),\n"
  v += "    .opcode(F_opcode),\n"
  v += "    .rs1_used(F_rs1_used), .rs1_imm(F_rs1_imm), .rs1_br_offset(F_rs1_br_offset), .rs1(F_rs1),\n"
  v += "    .rs2_used(F_rs2_used), .rs2(F_rs2),\n"
  v += "    .wen(F_wen), .rd(F_rd), .rd_data_use_alu(F_rd_data_use_alu),\n"
  v += "    .mem_valid(F_mem_valid),\n"
  v += "    .is_br(F_is_br)\n"
  v += "  );\n"
  v += "\n"
  v += "\n"
  v += "\n"
  v += "\n"




  v += "  // STEP: rf Read Write\n"
  v += "  wire [`REG_LEN-1:0] F_rs1_data_rf;\n"
  v += "  wire [`REG_LEN-1:0] F_rs2_data_rf;\n"
  v += "  rf rf_instance(\n"
  v += "    .clk(clk), .rst(rst),\n"
  v += "    .rs1(F_rs1), .rs1_data(F_rs1_data_rf),\n"
  v += "    .rs2(F_rs2), .rs2_data(F_rs2_data_rf),\n"
  v += "    .wen(C_valid && C_wen), .rd(C_rd), .rd_data(C_rd_data)\n"
  v += "  );\n"
  v += "\n"
  v += "\n"
  v += "\n"
  v += "\n"




  v += "  // STEP: PC Prediction\n"
  v += "  wire                      F_predicted_taken;\n"
  v += "  wire [`MEMI_SIZE_LOG-1:0] F_next_pc;\n"
  v += "\n"
  v += "  assign F_predicted_taken = 1'b0;\n"
  v += "  assign F_next_pc = (C_valid && C_squash)?           C_next_pc :\n"
  v += "                     ROB_full?                        F_pc :\n"
  v += "                     (F_is_br && F_predicted_taken)?  F_pc+F_rs1_br_offset :\n"
  v += "                                                      F_pc+1;\n"
  v += "\n"
  v += "\n"
  v += "\n"
  v += "\n"




  v += "  // STEP: Rename Table\n"
  v += "  reg  [`RF_SIZE-1     :0] renameTB_valid;\n"
  v += "  reg  [`ROB_SIZE_LOG-1:0] renameTB_ROBlink [`RF_SIZE-1:0];\n"
  v += "\n"
  v += "  wire                F_rs1_stall;\n"
  v += "  wire [`REG_LEN-1:0] F_rs1_data;\n"
  v += "  wire                F_rs2_stall;\n"
  v += "  wire [`REG_LEN-1:0] F_rs2_data;\n"
  v += "\n"
  v += "  // STEP.: update rename table entries\n"
  v += "  wire renameTB_clearEntry, renameTB_addEntry, renameTB_clearAddConflict;\n"
  v += "  assign renameTB_clearEntry = C_valid && C_wen && (renameTB_ROBlink[C_rd]==ROB_head);\n"
  v += "  assign renameTB_addEntry   = !ROB_full && F_wen;\n"
  v += "  assign renameTB_clearAddConflict = renameTB_addEntry && renameTB_clearEntry && F_rd==C_rd;\n"
  v += "  always @(posedge clk) begin\n"
  v += "    if (rst)        begin \n"
  v += "      for (i=0; i<`RF_SIZE; i=i+1) begin\n"
  v += "        renameTB_valid[i]         <= 1'b0;\n"
  v += "      end\n"
  v += "    end\n"
  v += "\n"
  v += "    else if (C_squash && C_valid)\n"
  v += "      for (i=0; i<`RF_SIZE; i=i+1) begin\n"
  v += "        renameTB_valid[i]         <= 1'b0;\n"
  v += "      end\n"
  v += "\n"
  v += "    else begin\n"
  v += "      if (renameTB_clearEntry && !renameTB_clearAddConflict) begin\n"
  v += "        renameTB_valid        [C_rd] <= 1'b0;\n"
  v += "      end\n"
  v += "\n"
  v += "      if (renameTB_addEntry) begin\n"
  v += "        renameTB_valid[F_rd]         <= 1'b1;\n"
  v += "      end\n"
  v += "    end\n"
  v += "  end\n"
  v += "\n"
  v += "  always @(posedge clk) begin\n"
  v += "    if (!ROB_full && F_wen) renameTB_ROBlink[F_rd] <= ROB_tail;\n"
  v += "  end\n"
  v += "\n"
  v += "\n"


  v += "  // STEP.: use renameTB to read data from either reg or ROB or stall\n"
  v += "  assign F_rs1_stall =\n"
  v += "    F_rs1_used && renameTB_valid[F_rs1] &&\n"
  v += "    !(ROB_state[renameTB_ROBlink[F_rs1]]==`FINISHED);\n"
  v += "  assign F_rs2_stall =\n"
  v += "    F_rs2_used && renameTB_valid[F_rs2] &&\n"
  v += "    !(ROB_state[renameTB_ROBlink[F_rs2]]==`FINISHED);\n"
  v += "\n"
  v += "  assign F_rs1_data = renameTB_valid[F_rs1]?\n"
  v += "                      ROB_rd_data[renameTB_ROBlink[F_rs1]]:\n"
  v += "                      F_rs1_data_rf;\n"
  v += "  assign F_rs2_data = renameTB_valid[F_rs2]?\n"
  v += "                      ROB_rd_data[renameTB_ROBlink[F_rs2]]:\n"
  v += "                      F_rs2_data_rf;\n"
  v += "\n"
  v += "\n"
  v += "\n"
  v += "\n"




  v += "  // STEP: ROB\n"
  v += "  reg  [`ROB_STATE_LEN-1:0] ROB_state [`ROB_SIZE-1:0];\n"
  v += "\n"
  v += "  reg  [`MEMI_SIZE_LOG-1:0] ROB_pc [`ROB_SIZE-1:0];\n"
  v += "  reg  [`INST_SIZE_LOG-1:0] ROB_op [`ROB_SIZE-1:0];\n"
  v += "\n"
  v += "  reg  [`ROB_SIZE-1     :0] ROB_rs1_stall;\n"
  v += "  reg  [`REG_LEN-1      :0] ROB_rs1_imm       [`ROB_SIZE-1:0];\n"
  v += "  reg  [`MEMI_SIZE_LOG-1:0] ROB_rs1_br_offset [`ROB_SIZE-1:0];\n"
  v += "  reg  [`REG_LEN-1      :0] ROB_rs1_data      [`ROB_SIZE-1:0];\n"
  v += "  reg  [`ROB_SIZE_LOG-1 :0] ROB_rs1_ROBlink   [`ROB_SIZE-1:0];\n"
  v += "\n"
  v += "  reg  [`ROB_SIZE-1     :0] ROB_rs2_stall;\n"
  v += "  reg  [`REG_LEN-1      :0] ROB_rs2_data      [`ROB_SIZE-1:0];\n"
  v += "  reg  [`ROB_SIZE_LOG-1 :0] ROB_rs2_ROBlink   [`ROB_SIZE-1:0];\n"
  v += "\n"
  v += "  reg  [`ROB_SIZE-1     :0] ROB_mem_valid;\n"
  v += "\n"
  v += "  reg  [`ROB_SIZE-1     :0] ROB_wen;\n"
  v += "  reg  [`RF_SIZE_LOG-1  :0] ROB_rd      [`ROB_SIZE-1:0];\n"
  v += "  reg  [`ROB_SIZE-1     :0] ROB_rd_data_use_alu;\n"
  v += "  reg  [`REG_LEN-1      :0] ROB_rd_data [`ROB_SIZE-1:0];\n"
  v += "\n"
  v += "  reg  [`ROB_SIZE-1     :0] ROB_is_br;\n"
  v += "  reg  [`ROB_SIZE-1     :0] ROB_predicted_taken;\n"
  v += "  reg  [`ROB_SIZE-1     :0] ROB_taken;\n"
  v += "  reg  [`MEMI_SIZE_LOG-1:0] ROB_next_pc [`ROB_SIZE-1:0];\n"
  v += "\n"
  v += "  reg  [`ROB_SIZE_LOG-1:0] ROB_head;\n"
  v += "  reg  [`ROB_SIZE_LOG-1:0] ROB_tail;\n"
  v += "\n"
  v += "  wire ROB_full;\n"
  v += "  wire ROB_empty;\n"
  v += "\n"

  v += "  always@(posedge clk) begin\n"
  v += "    if (rst) begin\n"
  v += "      for (i=0; i<`ROB_SIZE; i=i+1) begin\n"
  v += "        ROB_state[i] <= `IDLE;\n"
  v += "      end\n"
  v += "      ROB_head <= 0;\n"
  v += "      ROB_tail <= 0;\n"
  v += "    end\n"
  v += "\n"

  v += "    // STEP.1: squash\n"
  v += "    else if (C_valid && C_squash) begin\n"
  v += "      for (i=0; i<`ROB_SIZE; i=i+1) begin\n"
  v += "        ROB_state[i] <= `IDLE;\n"
  v += "      end\n"
  v += "      ROB_head <= 0;\n"
  v += "      ROB_tail <= 0;\n"
  v += "    end\n"
  v += "\n"

  v += "    else begin\n"
  v += "      // STEP.2: push\n"
  v += "      if (!ROB_full) begin\n"
  v += "        ROB_state[ROB_tail] <= `STALLED;\n"
  v += "\n"
  v += "        ROB_pc[ROB_tail] <= F_pc;\n"
  v += "        ROB_op[ROB_tail] <= F_opcode;\n"
  v += "\n"
  v += "        ROB_rs1_stall      [ROB_tail] <= F_rs1_stall;\n"
  v += "        ROB_rs1_imm        [ROB_tail] <= F_rs1_imm;\n"
  v += "        ROB_rs1_br_offset  [ROB_tail] <= F_rs1_br_offset;\n"
  v += "        ROB_rs1_data       [ROB_tail] <= F_rs1_data;\n"
  v += "        ROB_rs1_ROBlink    [ROB_tail] <= renameTB_ROBlink[F_rs1];\n"
  v += "\n"
  v += "        ROB_rs2_stall      [ROB_tail] <= F_rs2_stall;\n"
  v += "        ROB_rs2_data       [ROB_tail] <= F_rs2_data;\n"
  v += "        ROB_rs2_ROBlink    [ROB_tail] <= renameTB_ROBlink[F_rs2];\n"
  v += "\n"
  v += "        ROB_wen            [ROB_tail] <= F_wen;\n"
  v += "        ROB_rd             [ROB_tail] <= F_rd;\n"
  v += "        ROB_rd_data_use_alu[ROB_tail] <= F_rd_data_use_alu;\n"
  v += "\n"
  v += "        ROB_mem_valid      [ROB_tail] <= F_mem_valid;\n"
  v += "\n"
  v += "        ROB_is_br          [ROB_tail] <= F_is_br;\n"
  v += "        ROB_predicted_taken[ROB_tail] <= F_predicted_taken;\n"
  v += "\n"
  v += "        ROB_tail <= ROB_tail + 1;\n"
  v += "      end\n"
  v += "\n"
  v += "\n"


  v += "      // STEP.3: wakeup\n"
  v += "      for (i=0; i<`ROB_SIZE; i=i+1) begin\n"
  v += "        if (ROB_state[i]==`STALLED &&\n"
  v += "            !ROB_rs1_stall[i] && !ROB_rs2_stall[i])\n"
  v += "          ROB_state [i] <= `READY;\n"
  v += "      end\n"
  v += "\n"
  v += "\n"


  v += "      // STEP.4: execute\n"
  v += "      for (i=0; i<`ROB_SIZE; i=i+1) begin\n"
  v += "        if (ROB_state[i]==`READY && ROB_exe_this_cycle[i]) begin\n"
  v += "          ROB_rd_data [i] <= ROB_rd_data_wire;\n"
  v += "          ROB_taken   [i] <= ROB_taken_wire;\n"
  v += "          ROB_next_pc [i] <= ROB_next_pc_wire;\n"
  v += "\n"
  v += "          ROB_state [i] <= `FINISHED;\n"
  v += "        end\n"
  v += "      end\n"
  v += "\n"
  v += "\n"


  v += "      // STEP.5: forward\n"
  v += "      for (i=0; i<`ROB_SIZE; i=i+1) begin\n"
  v += "        if (ROB_state[i]==`FINISHED) begin\n"
  v += "          for (j=0; j<`ROB_SIZE; j=j+1) begin\n"
  v += "            if (ROB_state[j]==`STALLED && ROB_rs1_stall[j] &&\n"
  v += "                ROB_rs1_ROBlink[j]==i[`ROB_SIZE_LOG-1:0]) begin\n"
  v += "              ROB_rs1_stall[j] <= 1'b0;\n"
  v += "              ROB_rs1_data[j] <= ROB_rd_data[i];\n"
  v += "            end\n"
  v += "\n"
  v += "            if (ROB_state[j]==`STALLED && ROB_rs2_stall[j] &&\n"
  v += "                ROB_rs2_ROBlink[j]==i[`ROB_SIZE_LOG-1:0]) begin\n"
  v += "              ROB_rs2_stall[j] <= 1'b0;\n"
  v += "              ROB_rs2_data[j] <= ROB_rd_data[i];\n"
  v += "            end\n"
  v += "          end\n"
  v += "        end\n"
  v += "      end\n"
  v += "\n"
  v += "\n"


  v += "      // STEP.6: pop\n"
  v += "      if (C_valid) begin\n"
  v += "        ROB_state[ROB_head] <= `IDLE;\n"
  v += "        ROB_head <= ROB_head + 1;\n"
  v += "      end\n"
  v += "    end\n"
  v += "  end\n"
  v += "\n"
  v += "  assign ROB_full  = ROB_state[ROB_tail] != `IDLE;\n"
  v += "  assign ROB_empty = ROB_state[ROB_head] == `IDLE;\n"
  v += "\n"
  v += "\n"
  v += "\n"
  v += "\n"




  v += "  // STEP: Execute + Memory Read\n"
  v += "  // STEP.X: arbitor to choose an entry in ROB\n"
  v += "  reg [`ROB_SIZE-1:0] ROB_exe_this_cycle;\n"
  v += "  always @(*) begin\n"
  v += "    ROB_exe_this_cycle = 0;\n"
  v += "    for (i=`ROB_SIZE-1; i >= 0; i=i-1)\n"
  v += "      if (ROB_state[i]==`READY)\n"
  v += "        ROB_exe_this_cycle = (1 << i);\n"
  v += "  end\n"
  v += "\n"
  v += "\n"


  v += "  // STEP.X: choose an input to execute unit\n"
  v += "  reg [`MEMI_SIZE_LOG-1:0] ROB_pc_wire;\n"
  v += "  reg [`INST_SIZE_LOG-1:0] ROB_op_wire;\n"
  v += "  reg [`REG_LEN-1      :0] ROB_rs1_imm_wire;\n"
  v += "  reg [`MEMI_SIZE_LOG-1:0] ROB_rs1_br_offset_wire;\n"
  v += "  reg [`REG_LEN-1      :0] ROB_rs1_data_wire;\n"
  v += "  reg [`REG_LEN-1      :0] ROB_rs2_data_wire;\n"
  v += "  reg                      ROB_rd_data_use_alu_wire;\n"
  v += "  reg                      ROB_is_br_wire;\n"
  v += "  always @(*) begin\n"
  v += "    ROB_pc_wire              = 0;\n"
  v += "    ROB_op_wire              = 0;\n"
  v += "    ROB_rs1_imm_wire         = 0;\n"
  v += "    ROB_rs1_data_wire        = 0;\n"
  v += "    ROB_rs1_br_offset_wire   = 0;\n"
  v += "    ROB_rs2_data_wire        = 0;\n"
  v += "    ROB_rd_data_use_alu_wire = 0;\n"
  v += "    ROB_is_br_wire           = 0;\n"
  v += "    for (i=0; i < `ROB_SIZE; i=i+1) begin\n"
  v += "      ROB_pc_wire              = ROB_pc_wire              | {`MEMI_SIZE_LOG{ROB_exe_this_cycle[i]}} & ROB_pc[i];\n"
  v += "      ROB_op_wire              = ROB_op_wire              | {`INST_SIZE_LOG{ROB_exe_this_cycle[i]}} & ROB_op[i];\n"
  v += "      ROB_rs1_imm_wire         = ROB_rs1_imm_wire         | {`REG_LEN      {ROB_exe_this_cycle[i]}} & ROB_rs1_imm[i];\n"
  v += "      ROB_rs1_data_wire        = ROB_rs1_data_wire        | {`REG_LEN      {ROB_exe_this_cycle[i]}} & ROB_rs1_data[i];\n"
  v += "      ROB_rs1_br_offset_wire   = ROB_rs1_br_offset_wire   | {`MEMI_SIZE_LOG{ROB_exe_this_cycle[i]}} & ROB_rs1_br_offset[i];\n"
  v += "      ROB_rs2_data_wire        = ROB_rs2_data_wire        | {`REG_LEN      {ROB_exe_this_cycle[i]}} & ROB_rs2_data[i];\n"
  v += "      ROB_rd_data_use_alu_wire = ROB_rd_data_use_alu_wire |                 ROB_exe_this_cycle[i]   & ROB_rd_data_use_alu[i];\n"
  v += "      ROB_is_br_wire           = ROB_is_br_wire           |                 ROB_exe_this_cycle[i]   & ROB_is_br[i];\n"
  v += "    end\n"
  v += "  end\n"
  v += "\n"
  v += "\n"


  v += "  // STEP.X: Memory Read\n"
  v += "  wire [`MEMD_SIZE_LOG-1:0] mem_addr;\n"
  v += "  wire [`REG_LEN-1      :0] mem_data;\n"
  v += "  memd memd_instance(\n"
  v += "    .clk(clk), .rst(rst),\n"
  v += "    .req_addr(mem_addr), .resp_data(mem_data)\n"
  v += "  );\n"
  v += "\n"
  v += "\n"


  v += "  // STEP.X: output from alu\n"
  v += "  wire [`REG_LEN-1      :0] ROB_rd_data_wire;\n"
  v += "  wire                      ROB_taken_wire;\n"
  v += "  wire [`MEMI_SIZE_LOG-1:0] ROB_next_pc_wire;\n"
  v += "  execute execute_instance(\n"
  v += "    .pc(ROB_pc_wire),\n"
  v += "    .op(ROB_op_wire),\n"
  v += "\n"
  v += "    .rs1_imm(ROB_rs1_imm_wire),\n"
  v += "    .rs1_br_offset(ROB_rs1_br_offset_wire),\n"
  v += "    .rs1_data(ROB_rs1_data_wire),\n"
  v += "\n"
  v += "    .rs2_data(ROB_rs2_data_wire),\n"
  v += "\n"
  v += "    .mem_addr(mem_addr),\n"
  v += "    .mem_data(mem_data),\n"
  v += "\n"
  v += "    .rd_data_use_alu(ROB_rd_data_use_alu_wire),\n"
  v += "    .rd_data(ROB_rd_data_wire),\n"
  v += "\n"
  v += "    .is_br(ROB_is_br_wire),\n"
  v += "    .taken(ROB_taken_wire),\n"
  v += "    .next_pc(ROB_next_pc_wire)\n"
  v += "  );\n"
  v += "\n"
  v += "\n"
  v += "\n"
  v += "\n"




  v += "  // STEP: Commit\n"
  v += "  wire                      C_valid;\n"
  v += "\n"
  v += "  wire                      C_wen;\n"
  v += "  wire [`RF_SIZE_LOG-1  :0] C_rd;\n"
  v += "  wire [`REG_LEN-1      :0] C_rd_data;\n"
  v += "\n"
  v += "  wire                      C_is_br;\n"
  v += "  wire                      C_taken;\n"
  v += "  wire                      C_squash;\n"
  v += "  wire [`MEMI_SIZE_LOG-1:0] C_next_pc;\n"
  v += "\n"
  v += "  assign C_valid = ROB_state[ROB_head]==`FINISHED;\n"
  v += "\n"
  v += "  assign C_wen     = ROB_wen    [ROB_head];\n"
  v += "  assign C_rd      = ROB_rd     [ROB_head];\n"
  v += "  assign C_rd_data = ROB_rd_data[ROB_head];\n"
  v += "\n"
  v += "  assign C_is_br   = ROB_is_br  [ROB_head];\n"
  v += "  assign C_taken   = ROB_taken  [ROB_head];\n"
  v += "  assign C_squash  = C_is_br && (ROB_predicted_taken[ROB_head] != ROB_taken[ROB_head]);\n"
  v += "  assign C_next_pc = ROB_next_pc[ROB_head];\n"
  v += "\n"

  v += "endmodule\n"
  v += "\n"

  return v




if __name__ == "__main__":
  v = gen_OOO()
  with open("src/gen/OOO.v", "w") as f:
    f.write(v)

